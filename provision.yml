---
- name: Prepare systems for running AFS
  hosts: afs_cell
  become: yes
  tasks: 
    - name: Fix /etc/hosts
      template: src=etc/hosts.j2 dest=/etc/hosts

    - name: Update all packages on the system
      package: name="*" state=latest

- name: Create a Kerberos realm
  hosts: afs_kdcs
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_krbserver

    - import_role:
        name: openafs_common

    - name: Create AFS service key.
      become: yes
      openafs_principal:
        state: present
        principal: "afs/{{ afs_cell }}"
        encryption_types:
          - aes128-cts
          - aes256-cts
      register: service_key_results

    - name: Create admin principal.
      become: yes
      openafs_principal:
        state: present
        principal: "{{ afs_admin }}"
        acl: "*"
      register: admin_princ_results

    - name: Create user principal.
      become: yes
      openafs_principal:
        state: present
        principal: "{{ afs_user }}"
      register: user_princ_results

    - name: Download keytabs.
      become: yes
      fetch:
        flat: yes
        src: "{{ item }}"
        dest: "{{ afs_cell_files }}/"
      with_items:
        - "{{ service_key_results.keytab }}"
        - "{{ admin_princ_results.keytab }}"
        - "{{ user_princ_results.keytab }}"
      when: not ansible_check_mode
      register: download_results

    - name: Downloaded.
      debug:
        msg: "{{ download_results.results | map(attribute='dest') | list }}"
      when: not ansible_check_mode
#
# Create a new OpenAFS cell with a set of clients and servers. Run the
# realm.yaml playbook before this to create a Kerberos realm, the service keys,
# and an admin pricipal and keytab (or provide the same.)
#

# First retrieve the addresses of all of the database servers. The results are
# saved in the csdb.yaml file on the controller. Alternatively, set the
# afs_csdb inventory variable.

- name: Create CellServDB
  hosts: afs_databases
  collections:
    - openafs_contrib.openafs
  tasks:
    - include_role:
        name: openafs_common
        tasks_from: generate_csdb
      when: afs_csdb is undefined

#
# Install and setup the fileservers and database servers.
#
- name: Install servers
  hosts: afs_databases:afs_fileservers
  collections:
    - openafs_contrib.openafs
  vars:
    # Create fake /vicep partitions for testing purposes.
    afs_pseudo_partitions: ['a', 'b', 'c']
  tasks:
    - import_role:
        name: openafs_server

#
# Install and setup the clients.
#
- name: Install clients
  hosts: afs_clients
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_krbclient

    - import_role:
        name: openafs_client

    - name: Upload keytabs
      copy:
        src: "{{ afs_cell_files }}/{{ item }}"
        dest: "{{ item }}"
        mode: "400"
      with_items:
        - "{{ afs_admin }}.keytab"
        - "{{ afs_user }}.keytab"

#
# Create the top-level cell volumes and an initial user.
#
- name: New cell
  hosts: afs_admin_client
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_common

    - name: Upload admin keytab
      copy:
        src: "{{ afs_cell_files }}/{{ afs_admin }}.keytab"
        dest: "{{ afs_admin }}.keytab"
        mode: "400"

    - name: Create top-level volumes
      openafs_volume:
        state: present
        name: "{{ item.name }}"
        mount: "{{ item.mount }}"
        acl: "{{ item.acl }}"
        auth_user: "{{ afs_admin }}"
        auth_keytab: "{{ afs_admin }}.keytab"
        replicas: 3
      with_items:
        - name: root.afs
          mount: /afs
          acl: "system:anyuser read"
        - name: root.cell
          mount: /afs/{{ afs_cell }}
          acl: "system:anyuser read"
        - name: test
          mount: /afs/{{ afs_cell }}/test
          acl:
            - "system:anyuser read"
            - "system:authuser write"

    - name: Create test user
      openafs_user:
        name: "{{ afs_user }}"
        id: "{{ afs_user_id }}"
        group: tester
        auth_user: "{{ afs_admin }}"
        auth_keytab: "{{ afs_admin }}.keytab"
